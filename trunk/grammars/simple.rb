# Autogenerated from a Treetop grammar. Edits may be lost.


module Simple
  include Treetop::Runtime

  def root
    @root || :cooldown_cost
  end

  module CooldownCost0
    def val
      elements[0]
    end

  end

  module CooldownCost1
    def cost_hash
      {:cooldown => val.text_value.to_i}
    end
  end

  def _nt_cooldown_cost
    start_index = index
    if node_cache[:cooldown_cost].has_key?(index)
      cached = node_cache[:cooldown_cost][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      if has_terminal?('\G[0-9]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      if has_terminal?('C', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('C')
        r3 = nil
      end
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CooldownCost0)
      r0.extend(CooldownCost1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:cooldown_cost][start_index] = r0

    r0
  end

end

class SimpleParser < Treetop::Runtime::CompiledParser
  include Simple
end
